import{_ as e,c as l,o,a2 as t}from"./chunks/framework.DLEg3w5z.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/blog/202504-DuckDB分布式计算.md","filePath":"doc/blog/202504-DuckDB分布式计算.md"}'),r={name:"doc/blog/202504-DuckDB分布式计算.md"};function p(d,a,i,n,s,u){return o(),l("div",null,[...a[0]||(a[0]=[t('<h2 id="smallpond" tabindex="-1">smallpond <a class="header-anchor" href="#smallpond" aria-label="Permalink to &quot;smallpond&quot;">​</a></h2><p>前段时间 , deepseek 开源了 基于 duckdb 和 3FS 的轻量级数据处理框架 smallpond, 实现了 duckdb 的分布式计算能力</p><p><a href="https://blog.mehdio.com/p/duckdb-goes-distributed-deepseeks" target="_blank" rel="noreferrer">解读</a></p><p>下文是针对上文的理解,记录一下</p><h2 id="核心功能与架构" tabindex="-1">核心功能与架构 <a class="header-anchor" href="#核心功能与架构" aria-label="Permalink to &quot;核心功能与架构&quot;">​</a></h2><p>smallpond 是一个轻量级数据处理框架，构建在 DuckDB 和 3FS 之上。以下是其核心功能和架构细节：</p><ul><li>DAG 执行模型与延迟求值</li></ul><p>smallpond 使用基于有向无环图 (DAG) 的执行模型，支持延迟求值（lazy evaluation）。这种模式常见于分布式计算框架，能够优化任务调度和资源利用。</p><ul><li>Ray Core 集成</li></ul><p>smallpond 利用 Ray Core（一个分布式计算框架，Ray Core 文档）来管理任务的分布式执行。Ray Core 提供可扩展性和容错性，适合大规模数据处理。</p><ul><li>分区策略</li></ul><p>smallpond 支持多种数据分区策略，包括哈希分区（hash）、均匀分区（even）和随机洗牌（random shuffle），以适应不同的数据分布需求。例如，用户可以通过代码如 df.repartition(3, hash_by=&quot;ticker&quot;) 实现哈希分区（smallpond GitHub 示例）。</p><ul><li>3FS 文件系统</li></ul><p>3FS 是 DeepSeek 开发的高性能分布式文件系统，优化用于 AI 训练和推理工作负载，支持现代 SSD 和 RDMA 网络。它的设计专注于随机读性能，去除了传统文件系统的缓存和预取功能，以提升 AI 任务的效率（3FS GitHub 仓库）。在 smallpond 中，3FS 负责分布式存储和数据访问。</p><h2 id="与其他框架的比较" tabindex="-1">与其他框架的比较 <a class="header-anchor" href="#与其他框架的比较" aria-label="Permalink to &quot;与其他框架的比较&quot;">​</a></h2><ul><li>Apache Spark</li></ul><p>Spark 是分布式计算的经典框架，广泛用于大数据处理，但其复杂性和开销较高。smallpond 则更轻量级，专注于 SQL 查询和数据分析，适合数据工程师（Spark 官网）。</p><ul><li>Daft</li></ul><p>Daft 是一个基于 Rust 的分布式框架，专注于数据处理，但其与 DuckDB 的集成不如 smallpond 紧密（Daft 官网）。</p><ul><li>其他扩展方式</li></ul><p>AWS Lambda 进行无服务器计算（[AWS Lambda 文档]([invalid url, do not cite])）或 MotherDuck 的双执行模式（结合本地和云资源，MotherDuck 架构）。这些方法适合不同场景，但可能缺乏 smallpond 的分布式性能。</p><h2 id="s3-扩展" tabindex="-1">S3 扩展 <a class="header-anchor" href="#s3-扩展" aria-label="Permalink to &quot;S3 扩展&quot;">​</a></h2><p>3FS 扩展到 S3</p><p><a href="https://github.com/definite-app/smallpond#" target="_blank" rel="noreferrer">源码</a></p><h2 id="java如何实现分布式计算" tabindex="-1">Java如何实现分布式计算 <a class="header-anchor" href="#java如何实现分布式计算" aria-label="Permalink to &quot;Java如何实现分布式计算&quot;">​</a></h2><p><a href="./202411-分布式计算和存储.html">附文</a></p><p>如果仅仅使用 分布式计算能力, hazelcast 稍显重量, 其核心功能 分布式缓存用不上</p>',27)])])}const m=e(r,[["render",p]]);export{c as __pageData,m as default};
