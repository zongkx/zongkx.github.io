import{_ as e,c as o,o as t,a2 as r}from"./chunks/framework.DLEg3w5z.js";const d="/assets/sdfsa.80Cy9s4V.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/blog/202410-网络抓包和压力测试.md","filePath":"doc/blog/202410-网络抓包和压力测试.md"}'),s={name:"doc/blog/202410-网络抓包和压力测试.md"};function c(i,a,n,h,l,p){return t(),o("div",null,[...a[0]||(a[0]=[r('<h2 id="charles" tabindex="-1">charles <a class="header-anchor" href="#charles" aria-label="Permalink to &quot;charles&quot;">​</a></h2><p>抓包工具</p><h3 id="windows代理" tabindex="-1">windows代理 <a class="header-anchor" href="#windows代理" aria-label="Permalink to &quot;windows代理&quot;">​</a></h3><p>默认使用windows代理,可以直接抓取本机的http请求</p><h3 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h3><p><img src="'+d+'" alt="sdfsa.png"></p><h2 id="stockfish" tabindex="-1">stockfish <a class="header-anchor" href="#stockfish" aria-label="Permalink to &quot;stockfish&quot;">​</a></h2><p>cpu benchmark</p><p><code>docker run -P --name stockfish --restart=always -d andrijdavid/stockfish</code></p><p>进入<code>bin/bash</code></p><ol><li><code>stockfish</code></li><li><code>benchmark</code> 或者 <code>go depth 20</code></li></ol><h2 id="dd" tabindex="-1">dd <a class="header-anchor" href="#dd" aria-label="Permalink to &quot;dd&quot;">​</a></h2><p><code>docker run --rm -v /path/to/test/dir:/testdir ubuntu:latest bash -c &quot;dd if=/dev/zero of=/testdir/testfile bs=1M count=1024 conv=fdatasync&quot;</code></p><h2 id="network" tabindex="-1">network <a class="header-anchor" href="#network" aria-label="Permalink to &quot;network&quot;">​</a></h2><p><code>docker run --rm -it nicolaka/netshoot mtr -rw 192.168.8.80</code></p>',15)])])}const u=e(s,[["render",c]]);export{f as __pageData,u as default};
