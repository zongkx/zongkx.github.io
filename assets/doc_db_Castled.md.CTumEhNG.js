import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.DPDPlp3K.js";const e="/assets/dc8a6778.BSaMkccC.png",l="/assets/9883f687.DGM_k177.png",p="/assets/3d0ef7dd.CyDWApnW.png",h="/assets/73331510.Br-2oZkP.png",k="/assets/fb2ff997.BhH6pitR.png",F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/db/Castled.md","filePath":"doc/db/Castled.md"}'),r={name:"doc/db/Castled.md"};function o(d,s,E,c,g,y){return n(),a("div",null,s[0]||(s[0]=[t('<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><img src="'+e+'" alt="1"></p><ul><li><a href="https://hub.fastgit.xyz/castledio/castled" target="_blank" rel="noreferrer">https://hub.fastgit.xyz/castledio/castled</a></li><li><a href="https://docs.castled.io/" target="_blank" rel="noreferrer">https://docs.castled.io/</a></li></ul><h2 id="反向etl" tabindex="-1">反向ETL <a class="header-anchor" href="#反向etl" aria-label="Permalink to &quot;反向ETL&quot;">​</a></h2><ol><li>核心在于 DataWareHouse 数据分发到下游系统</li><li>相较于etl 往往实现的是 业务数据收集的功能,而反向etl工具实现的是数据分发的功能.</li><li>同类的还有 <code>Census``Grouparoo</code></li><li>反向etl值得学习的地方在于 <code>sink</code>的灵活 集成</li></ol><h2 id="增量功能" tabindex="-1">增量功能 <a class="header-anchor" href="#增量功能" aria-label="Permalink to &quot;增量功能&quot;">​</a></h2><p>castled 实现了 增量/全量的推送功能,基于 snapshot实现增量功能</p><p>其源码 <code>/connectors</code>模块下的 <code>io.castled.warehouses.connectors.postgres</code>包中大概提示了其在使 <code>pg source </code>时的 diff 的核心逻辑:</p><p>通过 pg的<code>except</code>配合 <code>uncommit_snapshot</code>和 <code>commit_snapshot</code>实现了数据diff,进行增量推送.</p><h2 id="安装试用" tabindex="-1">安装试用 <a class="header-anchor" href="#安装试用" aria-label="Permalink to &quot;安装试用&quot;">​</a></h2><p>docker-compose: 下载源码,其中<code> .env</code>和<code>docker-compose.yaml </code>放到<code> /opt/castled</code>中执行</p><blockquote><p>docker-compose up -d</p></blockquote><blockquote><p><a href="http://192.168.203.128:3000" target="_blank" rel="noreferrer">http://192.168.203.128:3000</a> 添加数据源 <img src="'+l+'" alt="2"><img src="'+p+'" alt="3"></p></blockquote><h2 id="源码学习" tabindex="-1">源码学习 <a class="header-anchor" href="#源码学习" aria-label="Permalink to &quot;源码学习&quot;">​</a></h2><h2 id="datapoll" tabindex="-1">DataPoll <a class="header-anchor" href="#datapoll" aria-label="Permalink to &quot;DataPoll&quot;">​</a></h2><p>对于不同的 source 而言,diff 功能的实现并不相同,但逻辑时相通的. <img src="'+h+`" alt="4"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.castled.warehouses;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.castled.constants.ConnectorExecutionConstants;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.castled.warehouses.models.WarehousePollContext;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.castled.warehouses.models.WarehousePollResult;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.file.Path;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WarehouseDataPoller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WarehousePollResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pollRecords</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WarehousePollContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">warehousePollContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WarehousePollResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resumePoll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WarehousePollContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">warehousePollContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cleanupPipelineRunResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WarehousePollContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">warehousePollContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cleanupPipelineResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pipelineUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, WarehouseConfig </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">warehouseConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPipelineRunUnloadDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pipelineUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pipelineRunId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectorExecutionConstants.WAREHOUSE_UNLOAD_DIR_PATH.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pipelineUUID).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pipelineRunId));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPipelineUnloadDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pipelineUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectorExecutionConstants.WAREHOUSE_UNLOAD_DIR_PATH.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pipelineUUID);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中核心在于 <code>pollRecords</code>和 <code>resumePoll</code>, 后者区别是非首次推送</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDataFetchQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WarehousePollContext warehousePollRequest, List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookKeepingTables) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String committedSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectorExecutionConstants.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getQualifiedCommittedSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(warehousePollRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPipelineUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String uncommittedSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectorExecutionConstants.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getQualifiedUncommittedSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(warehousePollRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPipelineUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bookKeepingTables.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConnectorExecutionConstants.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommittedSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(warehousePollRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPipelineUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;select * from %s except select * from %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uncommittedSnapshot, committedSnapshot);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;select * from %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uncommittedSnapshot);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>pg</code>的实现核心便是上面的代码.</p><h2 id="app-sink-抽象" tabindex="-1">App(Sink)抽象 <a class="header-anchor" href="#app-sink-抽象" aria-label="Permalink to &quot;App(Sink)抽象&quot;">​</a></h2><p>castld为了方便各种<code>sink</code>集成,抽象出了 <code>DataSink</code>接口</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataSink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> syncRecords</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DataSinkRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataSinkRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AppSyncStats </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSyncStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="我的方案" tabindex="-1">我的方案 <a class="header-anchor" href="#我的方案" aria-label="Permalink to &quot;我的方案&quot;">​</a></h2><p>利用dremio的 create view select as 和 except(取差集)的能力, 针对某些特定的模型,指定调度任务进行数据快照,并进行s3存储(parquet) 快照后的数据可以用来diff也可以用来溯源等. <img src="`+k+'" alt="5"></p><p>反向etl的核心在于扩展性,dremio作为数据湖引擎提供了source端的强大能力,重点在于sink的标准接口声明 对于不同的下游系统,可能存在不同的接口规范,基于pf4j的插件化能力,以及easybatch的writer的标准声明,可以极大程度上提高系统的扩展性.</p>',26)]))}const m=i(r,[["render",o]]);export{F as __pageData,m as default};
