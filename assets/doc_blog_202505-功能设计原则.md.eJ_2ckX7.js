import{_ as a,c as i,o as t,a2 as l}from"./chunks/framework.B1bciaKh.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/blog/202505-功能设计原则.md","filePath":"doc/blog/202505-功能设计原则.md"}'),o={name:"doc/blog/202505-功能设计原则.md"};function r(n,e,s,c,_,d){return t(),i("div",null,[...e[0]||(e[0]=[l('<h2 id="健壮性原则" tabindex="-1">健壮性原则 <a class="header-anchor" href="#健壮性原则" aria-label="Permalink to &quot;健壮性原则&quot;">​</a></h2><p>“在你发送的内容中保持保守，在你接受的内容中保持自由&quot;</p><h2 id="solid-原则" tabindex="-1">SOLID 原则 <a class="header-anchor" href="#solid-原则" aria-label="Permalink to &quot;SOLID 原则&quot;">​</a></h2><ul><li>S Single Responsibility Principle (SRP) 一个类/函数应该只有一个职责</li><li>O Open/Closed Principle (OCP) 对扩展开放，对修改关闭</li><li>L Liskov Substitution Principle (LSP) 子类应能替换父类而不破坏逻辑</li><li>I Interface Segregation Principle (ISP) 客户端不应依赖它不需要的接口</li><li>D Dependency Inversion Principle (DIP) 依赖抽象，而不是具体实现</li></ul><h2 id="用组合替代继承" tabindex="-1">用组合替代继承 <a class="header-anchor" href="#用组合替代继承" aria-label="Permalink to &quot;用组合替代继承&quot;">​</a></h2><p>在JDBC驱动中,常见的风格即用 组合替代继承</p><p>组合通过引入另外一个类的实例,利用其功能,可以灵活动态的更改其实现</p>',7)])])}const P=a(o,[["render",r]]);export{h as __pageData,P as default};
