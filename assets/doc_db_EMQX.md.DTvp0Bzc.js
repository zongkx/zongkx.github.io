import{_ as i,c as a,o as n,a2 as p}from"./chunks/framework.DLEg3w5z.js";const l="/assets/img.C_itXlpu.png",t="/assets/img1.CTBgazj-.png",e="/assets/img2.BCoSSZsj.png",h="/assets/sddsfsd.BEHgaom2.png",k="/assets/gdhgdfger.Bzfwqdhk.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/db/EMQX.md","filePath":"doc/db/EMQX.md"}'),r={name:"doc/db/EMQX.md"};function E(d,s,c,o,g,y){return n(),a("div",null,[...s[0]||(s[0]=[p(`<h2 id="mica-客户端" tabindex="-1">Mica 客户端 <a class="header-anchor" href="#mica-客户端" aria-label="Permalink to &quot;Mica 客户端&quot;">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;net.dreamlu&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;mica-mqtt-client-spring-boot-starter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.3.9&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="yml" tabindex="-1">yml <a class="header-anchor" href="#yml" aria-label="Permalink to &quot;yml&quot;">​</a></h3><p>只需要基础配置</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mqtt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 是否开启客户端，默认：true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0.0.1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 连接的服务端 ip ，默认：127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1883</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 端口：默认：1883</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    user-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 认证的用户名</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aaaa&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 认证的密码</span></span></code></pre></div><h3 id="配置自定义线程数量" tabindex="-1">配置自定义线程数量 <a class="header-anchor" href="#配置自定义线程数量" aria-label="Permalink to &quot;配置自定义线程数量&quot;">​</a></h3><p>由于默认线程数量只有2,可以通过<code>MqttClientCustomizer</code>来自定义配置</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqttClientCustomizer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mqttClientCustomizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //默认线程数2  提高到20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> creator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> creator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mqttExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ThreadUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBizExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="日志追踪" tabindex="-1">日志追踪 <a class="header-anchor" href="#日志追踪" aria-label="Permalink to &quot;日志追踪&quot;">​</a></h2><p>进入容器后输入</p><blockquote><p>emqx_ctl trace start client clientid log/my_client.log</p></blockquote><p>即可在/opt/emqx/log中查看追踪日志</p><h2 id="deploy" tabindex="-1">deploy <a class="header-anchor" href="#deploy" aria-label="Permalink to &quot;deploy&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2.2&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  emqx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">emqx/emqx:4.3.8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1883:1883</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8081:8081</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8083:8083</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8883:8883</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8084:8084</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">18083:18083</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TZ=Asia/Shanghai</span></span></code></pre></div><h2 id="emqx的客户端上下线-webhook" tabindex="-1">EMQX的客户端上下线 webhook <a class="header-anchor" href="#emqx的客户端上下线-webhook" aria-label="Permalink to &quot;EMQX的客户端上下线 webhook&quot;">​</a></h2><ol><li><p>进入EMQX web后台 ,启用 WEB_HOOK插件 <img src="`+l+'" alt="img.png"></p></li><li><p>进入左侧资源页面新增资源,选择Webhook ,并填写 URL</p><blockquote><p>http://{ip}:{port}/emqx/webhook <img src="'+t+'" alt="img1.png"></p></blockquote></li><li><p>进入左侧规则页面新增两条规则(上线/下线),sql分别对应下文所写, sql配置完成之后再关联到2中添加的规则</p><p><img src="'+e+'" alt="img.png"></p><p>上线规则:</p><blockquote><p>SELECT * FROM &quot;$events/client_connected&quot;</p></blockquote><p>下线规则:</p><blockquote><p>SELECT * FROM &quot;$events/client_disconnected&quot;</p></blockquote></li></ol><h2 id="ssl-单向认证" tabindex="-1">ssl 单向认证 <a class="header-anchor" href="#ssl-单向认证" aria-label="Permalink to &quot;ssl 单向认证&quot;">​</a></h2><p>单向认证不需要CA pem 把 key 和 cert 文件 重命名为 server-cert.perm/ server-keyi.pem</p><p><img src="'+h+`" alt="img.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>listeners.ssl.default {</span></span>
<span class="line"><span> bind = &quot;0.0.0.0:8883&quot;</span></span>
<span class="line"><span> ssl_options {</span></span>
<span class="line"><span>   # PEM 格式的文件，包含一个或多个用于验证客户端证书的根 CA 证书</span></span>
<span class="line"><span>   # 单向认证时，该文件内容可以为空</span></span>
<span class="line"><span>   cacertfile = &quot;etc/certs/rootCAs.pem&quot;</span></span>
<span class="line"><span>   # PEM 格式的服务器证书，如果证书不是直接由根 CA 签发，那么中间 CA 的证书必须加在服务器证书的后面组成一个证书链</span></span>
<span class="line"><span>   certfile = &quot;etc/certs/server-cert.pem&quot;</span></span>
<span class="line"><span>   # PEM 格式的密钥文件</span></span>
<span class="line"><span>   keyfile = &quot;etc/certs/server-keyi.pem&quot;</span></span>
<span class="line"><span>   # 设置成 &#39;verify_peer&#39; 来验证客户端证书是否为 cacertfile 中某个根证书签发。双向认证时，必须设置成 &#39;verify_peer&#39;。</span></span>
<span class="line"><span>   # 设置成 &#39;verify_none&#39; 则不验证客户端证书，即单向认证。</span></span>
<span class="line"><span>   verify = verify_none</span></span>
<span class="line"><span>   # 如果设置成 true，但是客户端在握手时候没有发送证书，服务端会终止握手。双向认证时，必须设置成 true。</span></span>
<span class="line"><span>   # 如果设置成 false，那么服务端只有在客户端发送一个非法证书时才会终止握手</span></span>
<span class="line"><span>   fail_if_no_peer_cert = false</span></span>
<span class="line"><span> }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>mqttx连接 需要关闭 SSL Secure <img src="`+k+'" alt="img.png"></p>',21)])])}const b=i(r,[["render",E]]);export{u as __pageData,b as default};
