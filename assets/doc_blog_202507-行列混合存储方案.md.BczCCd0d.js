import{_ as i,c as a,o as l,a2 as n}from"./chunks/framework.DLEg3w5z.js";const t="/assets/gh76896.tl-QKflc.png",h="/assets/gh55435.CNgUwtt2.png",p="/assets/gh677567.B1AeLB5Y.png",k="/assets/gh452342.DLFR20ve.png",e="/assets/gh5456456.DqeAe1AW.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/blog/202507-行列混合存储方案.md","filePath":"doc/blog/202507-行列混合存储方案.md"}'),r={name:"doc/blog/202507-行列混合存储方案.md"};function d(E,s,g,c,y,o){return l(),a("div",null,[...s[0]||(s[0]=[n('<h2 id="设备数据概述" tabindex="-1">设备数据概述 <a class="header-anchor" href="#设备数据概述" aria-label="Permalink to &quot;设备数据概述&quot;">​</a></h2><p><img src="'+t+'" alt="img.png"><img src="'+h+'" alt="img_1.png"></p><h2 id="列式存储" tabindex="-1">列式存储 <a class="header-anchor" href="#列式存储" aria-label="Permalink to &quot;列式存储&quot;">​</a></h2><p>优点:</p><ul><li>同列数据相似性,更好的压缩率;</li><li>按列查询,减少磁盘I/O</li><li>单列的统计/聚合性能强</li></ul><p>缺点:</p><ul><li>插入/更新/删除操作,无法追加写入</li></ul><p>主流的列式文件存储格式: .parquet/.orc/.arrow</p><p>(采用parquet,duckdb对parquet更加友好)</p><p><img src="'+p+'" alt="img_2.png"></p><h2 id="解决思路-分区" tabindex="-1">解决思路-分区 <a class="header-anchor" href="#解决思路-分区" aria-label="Permalink to &quot;解决思路-分区&quot;">​</a></h2><ul><li>设备体征数据 从用途上来看,都是围绕病档和时间进行的,具有良好的分区背景,因此针对体征数据设计了二级分区的目录结构</li><li>点测数据 第一版方案是和体征保持一致, 后由于 查询需求, 变更为 仅根据pid 分区,所有点测数据都存储在 病档接收日期/pid/item.duckdb 中</li><li>概览统计数据 概览数据进存储最近24小时数据,数据量及体积有限,故不考虑分区,直接存储在 data/AvroEcgStatistics/ecg.duckdb 中</li></ul><h2 id="列存储" tabindex="-1">列存储 <a class="header-anchor" href="#列存储" aria-label="Permalink to &quot;列存储&quot;">​</a></h2><ul><li>最初的设计方案 每秒数据直接在对应的目录中生成单秒的parquet文件 ( s_时间戳.parquet) 写入代码中内置计数器,到达一定量的时候进行一次 合并 (多个 s_时间戳.parquet 合并成一个 m_时间戳.parquet),合并后删除</li><li>致命缺点 查询和写入需要加锁,否则存在 parquet文件占用的问题, 编码难度急速上升 读写锁带来的查询性能瓶颈</li></ul><h2 id="开源方案" tabindex="-1">开源方案 <a class="header-anchor" href="#开源方案" aria-label="Permalink to &quot;开源方案&quot;">​</a></h2><p>目前主流的数据湖存储方案中, 都提到了 Copy-On-Write 和 Merge-On-Read 的策略, 理解这两种策略 帮助我们如何平衡查询和写入效率, 参考下图 Apache Hudi 对这两种表策略的介绍</p><p><img src="'+k+'" alt="img_2.png"></p><p><img src="'+e+`" alt="img_1.png"></p><h2 id="写合并-读复制" tabindex="-1">写合并 读复制 <a class="header-anchor" href="#写合并-读复制" aria-label="Permalink to &quot;写合并 读复制&quot;">​</a></h2><ul><li><p>写合并 使用jsonline格式, 利用 BufferWriter 写入到 temp.csv中 ( 缓冲区flush写入,配合jsonline格式天然避免异常断电导致数据破损的异常) 行数到达一定数量后,同步生成parquet文件并清空 temp.csv ,计数还原, 循环</p></li><li><p>读复制 写线程持续占用 temp.csv, 所以查询的时候需要 复制此文件 合并 *.parquet作为数据源 截止到目前duckdb 最新版本 1.3.0 已经支持只读模式查询 csv文件， 读不再需要复制</p></li></ul><p>duck sql <code>select * from (select args,wave,tms from &#39;.../123.csv&#39; union all select args,wave,tms from &#39;..../*.parquet) t</code></p><h2 id="行列混合存储" tabindex="-1">行列混合存储 <a class="header-anchor" href="#行列混合存储" aria-label="Permalink to &quot;行列混合存储&quot;">​</a></h2><ul><li><p>解决了什么问题 在充分满足写入性能的前提下,满足体征数据简单查询的需求; 通过 波形压缩及列式存储(lz4_raw) 满足数据文件占用优化的目标</p></li><li><p>未来潜在的优化空间 分区粒度进一步缩小; 分布式存储查询; 设备数据时序性强,参考时序库TimescaleDB/QuestDB等通过自建时间戳索引提高查询性能的</p></li></ul><h2 id="duckdb" tabindex="-1">DuckDB <a class="header-anchor" href="#duckdb" aria-label="Permalink to &quot;DuckDB&quot;">​</a></h2><ul><li><p>为什么用duckdb</p><ul><li>parquet 读写良好的支持;</li><li>embedded服务, 替换Apache Cassandra ,无运维工作;</li><li>类pg语法, 上手难度低;</li><li>列式引擎, 查询性能强;</li><li>社区活跃,版本迭代迅速;</li><li>报表模块有过使用经验;</li><li>轻量, 对比数据湖方案严重依赖hadoop体系;</li></ul></li><li><p>DuckDB都用到了哪些</p></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- mysql插件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PRAGMA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">extension_directory  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FORCE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">install mysql;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LOAD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ATTACH</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;host=192.168.8.80 password=111 user=root port=3306 database=cms&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mysql);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- CTE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> min_tms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> temp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input_tms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> min_tms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                 FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp(input_tms)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                          JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> temp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input_tms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                 GROUP BY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> temp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input_tms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> min_tms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> min_tms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min_tms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> min_tms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input_tms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- parquet</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args, id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_json(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;D:\\\\temp.csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;D:\\\\v2.parquet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMPRESSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LZ4_RAW, PARQUET_VERSION V2);</span></span></code></pre></div>`,26)])])}const m=i(r,[["render",d]]);export{u as __pageData,m as default};
