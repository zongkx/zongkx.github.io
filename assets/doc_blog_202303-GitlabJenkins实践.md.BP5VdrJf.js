import{_ as a,c as n,o as p,a2 as e}from"./chunks/framework.DLEg3w5z.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/blog/202303-GitlabJenkins实践.md","filePath":"doc/blog/202303-GitlabJenkins实践.md"}'),l={name:"doc/blog/202303-GitlabJenkins实践.md"};function t(i,s,c,o,r,d){return p(),n("div",null,[...s[0]||(s[0]=[e(`<h2 id="gitlab-jenkins-docker-docker" tabindex="-1">gitlab+jenkins+docker+docker <a class="header-anchor" href="#gitlab-jenkins-docker-docker" aria-label="Permalink to &quot;gitlab+jenkins+docker+docker&quot;">​</a></h2><p>目前公司运行了一套上述服务部署环境,作为一名后端开发虽然没有亲自部署过这些服务,但是简单使用还是很有必要掌握的.</p><h3 id="_1-gitlab" tabindex="-1">1. gitlab <a class="header-anchor" href="#_1-gitlab" aria-label="Permalink to &quot;1. gitlab&quot;">​</a></h3><p>gitlab中一般包括dev/master分支,分别用于测试环境和生产环境</p><h3 id="_2-项目中的配置" tabindex="-1">2. 项目中的配置 <a class="header-anchor" href="#_2-项目中的配置" aria-label="Permalink to &quot;2. 项目中的配置&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  &lt;profiles&gt;</span></span>
<span class="line"><span>        &lt;profile&gt;</span></span>
<span class="line"><span>            &lt;id&gt;pro&lt;/id&gt;</span></span>
<span class="line"><span>            &lt;activation&gt;</span></span>
<span class="line"><span>                &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;</span></span>
<span class="line"><span>            &lt;/activation&gt;</span></span>
<span class="line"><span>            &lt;properties&gt;</span></span>
<span class="line"><span>                &lt;profile-name&gt;pro&lt;/profile-name&gt;</span></span>
<span class="line"><span>                &lt;server-port&gt;9092&lt;/server-port&gt;</span></span>
<span class="line"><span>            &lt;/properties&gt;</span></span>
<span class="line"><span>        &lt;/profile&gt;</span></span>
<span class="line"><span>        &lt;profile&gt;</span></span>
<span class="line"><span>            &lt;id&gt;pro&lt;/id&gt;</span></span>
<span class="line"><span>            &lt;activation&gt;</span></span>
<span class="line"><span>                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span></span>
<span class="line"><span>            &lt;/activation&gt;</span></span>
<span class="line"><span>            &lt;properties&gt;</span></span>
<span class="line"><span>                &lt;profile-name&gt;dev&lt;/profile-name&gt;</span></span>
<span class="line"><span>                &lt;server-port&gt;9092&lt;/server-port&gt;</span></span>
<span class="line"><span>            &lt;/properties&gt;</span></span>
<span class="line"><span>        &lt;/profile&gt;</span></span>
<span class="line"><span>  &lt;/profiles&gt;</span></span></code></pre></div><p>利用插件<code>maven-resources-plugin</code>自动替换application.yml/k8s svc文件/log.xml等的文件中的占位符, 通过<code>-Pdev</code>/<code>-Ppro</code> 实现生成不同配置文件的功能.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;plugin&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;3.2.0&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;configuration&gt;</span></span>
<span class="line"><span>        &lt;encoding&gt;utf-8&lt;/encoding&gt;</span></span>
<span class="line"><span>        &lt;useDefaultDelimiters&gt;true&lt;/useDefaultDelimiters&gt;</span></span>
<span class="line"><span>        &lt;resources&gt;</span></span>
<span class="line"><span>            &lt;resource&gt;</span></span>
<span class="line"><span>                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span>
<span class="line"><span>                &lt;filtering&gt;true&lt;/filtering&gt;</span></span>
<span class="line"><span>            &lt;/resource&gt;</span></span>
<span class="line"><span>            &lt;resource&gt;</span></span>
<span class="line"><span>                &lt;directory&gt;src/main/k8s&lt;/directory&gt;</span></span>
<span class="line"><span>                &lt;filtering&gt;true&lt;/filtering&gt;</span></span>
<span class="line"><span>            &lt;/resource&gt;</span></span>
<span class="line"><span>        &lt;/resources&gt;</span></span>
<span class="line"><span>    &lt;/configuration&gt;</span></span>
<span class="line"><span>&lt;/plugin&gt;</span></span></code></pre></div><p><code>deploy.yml</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>apiVersion: extensions/v1beta1</span></span>
<span class="line"><span>kind: Deployment</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: mydemo-service</span></span>
<span class="line"><span>  namespace: mydemo-\${profile-name}</span></span>
<span class="line"><span>  labels:</span></span>
<span class="line"><span>    name: mydemo</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  replicas: 1</span></span>
<span class="line"><span>  strategy:</span></span>
<span class="line"><span>    rollingUpdate:</span></span>
<span class="line"><span>      maxSurge: 1</span></span>
<span class="line"><span>      maxUnavailable: 1</span></span>
<span class="line"><span>    type: RollingUpdate</span></span>
<span class="line"><span>  template:</span></span>
<span class="line"><span>    metadata:</span></span>
<span class="line"><span>      annotations:</span></span>
<span class="line"><span>        prometheus.io/path: /prometheus</span></span>
<span class="line"><span>        prometheus.io/port: &quot;\${server-port}&quot;</span></span>
<span class="line"><span>        prometheus.io/scrape: &quot;true&quot;</span></span>
<span class="line"><span>      labels:</span></span>
<span class="line"><span>        name: mydemo-service</span></span>
<span class="line"><span>    spec:</span></span>
<span class="line"><span>      containers:</span></span>
<span class="line"><span>        - image: 127.0.0.1/\${project.artifactId}-\${profile-name}:\${project.version}-\${timestamp}</span></span>
<span class="line"><span>          name: mydemo-service</span></span>
<span class="line"><span>      restartPolicy: Always</span></span></code></pre></div><p><code>svc.yml</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>apiVersion: v1</span></span>
<span class="line"><span>kind: Service</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: mydemo-service--svc</span></span>
<span class="line"><span>  namespace: mydemo-\${profile-name}</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    name: mydemo-service</span></span>
<span class="line"><span>  ports:</span></span>
<span class="line"><span>    - name: http</span></span>
<span class="line"><span>      port: \${server-port}</span></span>
<span class="line"><span>      protocol: TCP</span></span>
<span class="line"><span>  type: NodePort</span></span></code></pre></div><p><code>dockerfile</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FROM openjdk:8-arthas</span></span>
<span class="line"><span>VOLUME /tmp</span></span>
<span class="line"><span>ADD mydemo-service-1.0-SNAPSHOT.jar app.jar</span></span>
<span class="line"><span>RUN sh -c &#39;touch /app.jar&#39;</span></span>
<span class="line"><span>RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span>
<span class="line"><span>ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-Duser.timezone=GMT+08&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span></span></code></pre></div><h3 id="_3-jenkins" tabindex="-1">3. jenkins <a class="header-anchor" href="#_3-jenkins" aria-label="Permalink to &quot;3. jenkins&quot;">​</a></h3><p>需要完成流水线中的脚本,为了直接从maven项目到k8s部署,实际上用流水线脚本即可完成. 分三步</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node(&quot;my&quot;) {</span></span>
<span class="line"><span>   stage(&#39;git clone&#39;) { </span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   stage(&#39;maven build &amp;&amp; deploy &#39;) {</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   stage(&quot;publish k8s&quot;) {</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol><li>拉代码</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  stage(&#39;获取代码&#39;) {</span></span>
<span class="line"><span>       checkout([$class: &#39;GitSCM&#39;, branches: [[name: &#39;\${branch}&#39;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &#39;凭据ID&#39;, url: &#39;GIT地址&#39;]]])</span></span>
<span class="line"><span>   }</span></span></code></pre></div><ol start="2"><li>构建并推送镜像</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  stage(&#39;maven build &amp;&amp; deploy &#39;) {      </span></span>
<span class="line"><span>      sh &quot;   &#39;\${mvnHome}/bin/mvn&#39;  clean  package  install -Dmaven.test.skip  -Pdev -U&quot;</span></span>
<span class="line"><span>      sh &quot; cd mydemo-service &amp;&amp;  &#39;\${mvnHome}/bin/mvn&#39;  clean  package  docker:build -DpushImage   -Dmaven.test.skip  -Pdev&quot;</span></span>
<span class="line"><span>   }</span></span></code></pre></div><p>依赖插件<code>docker-maven-plugin</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> &lt;plugin&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;0.4.11&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;configuration&gt;</span></span>
<span class="line"><span>        &lt;imageName&gt;127.0.0.1/\${project.artifactId}-\${profile-name}&lt;/imageName&gt;</span></span>
<span class="line"><span>        &lt;imageTags&gt;\${project.version}-\${timestamp}&lt;/imageTags&gt;</span></span>
<span class="line"><span>        &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span></span>
<span class="line"><span>        &lt;serverId&gt;docker-image&lt;/serverId&gt;</span></span>
<span class="line"><span>        &lt;useConfigFile&gt;true&lt;/useConfigFile&gt;</span></span>
<span class="line"><span>        &lt;resources&gt;</span></span>
<span class="line"><span>            &lt;resource&gt;</span></span>
<span class="line"><span>                &lt;targetPath&gt;/&lt;/targetPath&gt;</span></span>
<span class="line"><span>                &lt;directory&gt;\${project.build.directory}&lt;/directory&gt;</span></span>
<span class="line"><span>                &lt;include&gt;\${project.build.finalName}.jar&lt;/include&gt;</span></span>
<span class="line"><span>            &lt;/resource&gt;</span></span>
<span class="line"><span>        &lt;/resources&gt;</span></span>
<span class="line"><span>    &lt;/configuration&gt;</span></span>
<span class="line"><span>&lt;/plugin&gt;</span></span></code></pre></div><ol start="3"><li>k8s部署</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   sh  &quot;cd mydemo-service &amp;&amp; kubectl  -s http://127.0.0.1:8888 apply  -f  target/classes/deploy.yaml -f target/classes/svc.yaml&quot;</span></span></code></pre></div><h3 id="_4-k8s" tabindex="-1">4. k8s <a class="header-anchor" href="#_4-k8s" aria-label="Permalink to &quot;4. k8s&quot;">​</a></h3><p>在k8s中指定的命名空间即可找到对应服务.</p>`,27)])])}const m=a(l,[["render",t]]);export{u as __pageData,m as default};
