import{_ as i,c as a,o as t,a2 as n}from"./chunks/framework.DLEg3w5z.js";const l="/assets/native-2.C_O3l1si.png",e="/assets/native-1.LXyZaoXH.png",c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/blog/202509-Native Image.md","filePath":"doc/blog/202509-Native Image.md"}'),p={name:"doc/blog/202509-Native Image.md"};function h(k,s,r,E,g,d){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="native-image" tabindex="-1">Native Image <a class="header-anchor" href="#native-image" aria-label="Permalink to &quot;Native Image&quot;">​</a></h2><p>在运行时通过 反射（reflection） 动态访问的类和方法，都必须在构建时通过 &quot;hints&quot;（提示） 明确告知编译器，否则就会在运行时出错。</p><h2 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;plugin&quot;">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.graalvm.buildtools&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;native-maven-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-maven-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>执行:</p><p><code>springboot-aot</code> 和 <code>native:build</code> 即可 <img src="`+l+'" alt="img.png"></p><h2 id="msvc" tabindex="-1">msvc <a class="header-anchor" href="#msvc" aria-label="Permalink to &quot;msvc&quot;">​</a></h2><p>windows 环境需要安装 c++ <img src="'+e+'" alt="img.png"></p><h3 id="jasypt" tabindex="-1">jasypt <a class="header-anchor" href="#jasypt" aria-label="Permalink to &quot;jasypt&quot;">​</a></h3><p><a href="https://github.com/ulisesbocchio/jasypt-spring-boot/issues/246#issuecomment-1751957932" target="_blank" rel="noreferrer">config</a></p><h3 id="duckdb" tabindex="-1">duckdb <a class="header-anchor" href="#duckdb" aria-label="Permalink to &quot;duckdb&quot;">​</a></h3><p>duckdb_jdbc 目前不支持 native image, DuckDB 的 Java 代码通过 JNI 与 C++ 交互时会使用**反射（Reflection）**机制。 GraalVM 需要JNI 配置元数据（JSON 文件）来知道哪些 C++ 函数和 Java 方法之间存在 JNI 调用。 由于 DuckDB 驱动程序尚未完全集成这些必要的 GraalVM 配置，因此在编译时，GraalVM 无法创建正确的连接代码，导致运行时出现致命错误。</p>',12)])])}const u=i(p,[["render",h]]);export{c as __pageData,u as default};
